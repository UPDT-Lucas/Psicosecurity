/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views.Employees;

import DataBase.get_procs;
import DataBase.upd_procs;
import Models.employee;
import Models.post;
import Models.salary;
import Utilities.extra_methods;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 * 
 * @author Lucas A. Oviedo Castro 
 * <p>
 * Last Modify Date: 06/02/2023.
 * By: Lucas A. Oviedo Castro 
 * <p>
 * JPanel with the View to check the employee salary information.
 */
public class salaryInfo extends javax.swing.JPanel {
    DefaultTableModel dtm = new DefaultTableModel();
    employee selectedEmp;
    salary empSalary;
    int extraHours;
    int lessHours;
    float baseSalary;
    
     /**
     * View Constructor
     * @param selectedEmp ArrayList of employees - the list of selected employees
     * @throws ClassNotFoundException if the class is not found
     * @throws SQLException if there is a problem during data collection
     */
    public salaryInfo(employee selectedEmp) throws SQLException, ClassNotFoundException {
        initComponents();
        
        this.selectedEmp = selectedEmp;
        post empPost = get_procs.get_post(selectedEmp.getId_post());
        baseSalary = empPost.getBase_salary();
        
        empSalary = get_procs.get_salary_by_emp(selectedEmp.getId_employee());
        String [] header = {"Salario Base", "Comisiones" ,"Total de horas extra", "Reducciones",
            "Total devengado", "Total CCSS", "Retenciones", "Adelantos", "Salario Total"};
        dtm.setColumnIdentifiers(header);
        salaryTable.setModel(dtm);
        
        dtm.addRow(new Object[] {baseSalary, empSalary.getCommissions(), empSalary.getExtra_hours(), 
            empSalary.getDeductions(), empSalary.getEarned_total(), empSalary.getCcss_total(), 
            empSalary.getWithholdings(), empSalary.getAdvances(), empSalary.getSalary_total()});
        
        fillFields();
                
    }
    
    /**
     * Update the text fields
     * @throws ClassNotFoundException if the class is not found
     * @throws SQLException if there is a problem during data collection
     */
    private void fillFields() throws SQLException, ClassNotFoundException{
        commisionsField.setText(String.valueOf(empSalary.getCommissions()));
        advancesField.setText(String.valueOf(empSalary.getAdvances()));
        
        extraHours = (int) (empSalary.getExtra_hours() /(((baseSalary / 30) / 8) * 1.5));
        extrasHoursField.setText(extraHours + "");
        
        lessHours = (int) (empSalary.getDeductions() /(((baseSalary / 30) / 8) * 1.5));
        deductionsField.setText(lessHours + "");
    }
    
    /**
     * Update the view salary table
     * @throws ClassNotFoundException if the class is not found
     * @throws SQLException if there is a problem during data collection
     */
    private void updateTable() throws SQLException, ClassNotFoundException{
        empSalary = get_procs.get_salary_by_emp(selectedEmp.getId_employee());
        extra_methods.clearTable(salaryTable, dtm);
        fillFields();
        
        dtm.addRow(new Object[] {baseSalary, empSalary.getCommissions(), empSalary.getExtra_hours(), 
            empSalary.getDeductions(), empSalary.getEarned_total(), empSalary.getCcss_total(), 
            empSalary.getWithholdings(), empSalary.getAdvances(), empSalary.getSalary_total()});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        salaryTable = new javax.swing.JTable();
        deductionsField = new javax.swing.JTextField();
        extrasHoursField = new javax.swing.JTextField();
        commisionsField = new javax.swing.JTextField();
        advancesField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        refreshImage = new Utilities.image_avatar();

        content.setBackground(new java.awt.Color(255, 255, 255));
        content.setPreferredSize(new java.awt.Dimension(1260, 700));

        salaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        salaryTable.setAutoscrolls(false);
        salaryTable.setCellSelectionEnabled(true);
        salaryTable.setPreferredSize(new java.awt.Dimension(400, 70));
        salaryTable.setShowGrid(true);
        jScrollPane1.setViewportView(salaryTable);

        deductionsField.setBorder(null);

        extrasHoursField.setBorder(null);

        commisionsField.setBorder(null);

        advancesField.setBorder(null);

        jLabel1.setText("Adelantos");

        jLabel2.setText("Comisiones");

        jLabel3.setText("Horas Extra (Ingresar horas)");

        jLabel4.setText("Reducciones por faltas (Ingresar horas)");

        refreshImage.setBorderSize(0);
        refreshImage.setBorderSpace(0);
        refreshImage.setImage(new javax.swing.ImageIcon(getClass().getResource("/images/optionsPerPanel/refreshImage.png"))); // NOI18N
        refreshImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshImageMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshImageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshImageMouseExited(evt);
            }
        });

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1120, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(commisionsField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(extrasHoursField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(deductionsField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(advancesField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(1000, 1000, 1000)
                .addComponent(refreshImage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(commisionsField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extrasHoursField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deductionsField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(advancesField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(refreshImage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshImageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshImageMouseEntered
        extra_methods.showSelectedOption(refreshImage, 995, 420);
    }//GEN-LAST:event_refreshImageMouseEntered

    private void refreshImageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshImageMouseExited
        extra_methods.resetSelectedOption(refreshImage, 1000, 420);
    }//GEN-LAST:event_refreshImageMouseExited

    private void refreshImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshImageMouseClicked
        try {
            boolean isChanged = false;
            if(extra_methods.isFloat(content, advancesField.getText())){
                if(empSalary.getAdvances() != Float.valueOf(advancesField.getText())){
                    if(extra_methods.confirmChanges(content, isChanged)){
                    try {
                        upd_procs.update_salary_advances(selectedEmp.getId_employee(), Float.valueOf(advancesField.getText()));
                        isChanged = true;
                    } catch (SQLException ex) {
                        Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
                }
                
            }
            if(extra_methods.isFloat(content, advancesField.getText())){
                if(empSalary.getCommissions() != Float.valueOf(commisionsField.getText())){
                    if(extra_methods.confirmChanges(content, isChanged)){
                        try {
                            upd_procs.update_salary_commisions(selectedEmp.getId_employee(), Float.valueOf(commisionsField.getText()));
                            isChanged = true;
                        } catch (SQLException ex) {
                            Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }

            }
            if(extra_methods.isNumeric(content, extrasHoursField.getText())){
                if(extraHours != Integer.valueOf(extrasHoursField.getText())){
                    if(extra_methods.confirmChanges(content, isChanged)){
                        try {
                            upd_procs.update_salary_extra_hours(selectedEmp.getId_employee(), Integer.valueOf(extrasHoursField.getText()));
                            isChanged = true;
                        } catch (SQLException ex) {
                            Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
            if(extra_methods.isNumeric(content, deductionsField.getText())){
                if(lessHours != Integer.valueOf(deductionsField.getText())){
                    if(extra_methods.confirmChanges(content, isChanged)){
                        try {
                            upd_procs.update_salary_deductions(selectedEmp.getId_employee(), Integer.valueOf(deductionsField.getText()));
                            isChanged = true;
                        } catch (SQLException ex) {
                            Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
            updateTable();
            extra_methods.changesAdvice(content, isChanged);
        } catch (SQLException ex) {
            Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(salaryInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshImageMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField advancesField;
    private javax.swing.JTextField commisionsField;
    private javax.swing.JPanel content;
    private javax.swing.JTextField deductionsField;
    private javax.swing.JTextField extrasHoursField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private Utilities.image_avatar refreshImage;
    private javax.swing.JTable salaryTable;
    // End of variables declaration//GEN-END:variables
}
