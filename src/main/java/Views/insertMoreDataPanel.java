/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import DataBase.get_all_procs;
import DataBase.ins_procs;
import Models.phone_category;
import Models.status;
import Models.type_observation;
import Utilities.extra_methods;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * 
 * @author Lucas A. Oviedo Castro 
 * <p>
 * Last Modify Date: 06/02/2023.
 * By: Lucas A. Oviedo Castro 
 * <p>
 * JPanel with the View to insert more general data into differents tables in mySQL
 */
public class insertMoreDataPanel extends javax.swing.JPanel {
        ArrayList<phone_category> allCategories;
        ArrayList<status> allStatuses;
        ArrayList<type_observation> allTypes;
        
        DefaultTableModel dtmCat = new DefaultTableModel();
        DefaultTableModel dtmStatus = new DefaultTableModel();
        DefaultTableModel dtmType = new DefaultTableModel();
        
    /**
     * View Constructor
     * @throws ClassNotFoundException if the class is not found
     * @throws SQLException if there is a problem during data collection
     */
    public insertMoreDataPanel() throws SQLException, ClassNotFoundException {
        initComponents();

        String[] headerType = new String[]{"Nombre"};
        dtmType.setColumnIdentifiers(headerType);
        observationTable.setModel(dtmType);

        String[] headerCategories = new String[]{"Nombre"};
        dtmCat.setColumnIdentifiers(headerCategories);
        phoneCatTable.setModel(dtmCat);       
        
        String[] headerStatus = new String[]{"Nombre"};
        dtmStatus.setColumnIdentifiers(headerStatus);
        statusEmpTable.setModel(dtmStatus);
        
        updateTableObservation();
        updateTablePhCat();
        updateTableStatus();

    }
    
    /**
     * Update the view Observation table
     * @throws ClassNotFoundException if the class is not found
     * @throws SQLException if there is a problem during data collection
     */    
    private void updateTableObservation() throws SQLException, ClassNotFoundException{
        extra_methods.clearTable(observationTable, dtmType);
        allTypes = get_all_procs.get_all_type_observations();
        for(type_observation obs : allTypes){
        dtmType.addRow(new Object[]{
            obs.getName_type()
             });
        }
    }
    
    /**
     * Update the view Status table
     * @throws ClassNotFoundException if the class is not found
     * @throws SQLException if there is a problem during data collection
     */
    private void updateTableStatus() throws SQLException, ClassNotFoundException{
        extra_methods.clearTable(statusEmpTable, dtmStatus);
        allStatuses = get_all_procs.get_all_status();
        for(status st : allStatuses){
             dtmStatus.addRow(new Object[]{
                 st.getName_status()
            });
        }    
    }
    
    /**
     * Update the view Phone Category table
     * @throws ClassNotFoundException if the class is not found
     * @throws SQLException if there is a problem during data collection
     */
    private void updateTablePhCat() throws SQLException, ClassNotFoundException{
        extra_methods.clearTable(phoneCatTable, dtmCat);
        allCategories = get_all_procs.get_all_ph_categories();
        for(phone_category phcat : allCategories){
             dtmCat.addRow(new Object[]{
             phcat.getDescription_category()
            });
        }         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        content = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        observationTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusEmpTable = new javax.swing.JTable();
        statusField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        obsField = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        phoneCatTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        typeField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        refreshObservationImage = new Utilities.image_avatar();
        refreshStatustImage = new Utilities.image_avatar();
        refreshCategoryImage = new Utilities.image_avatar();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();

        content.setBackground(new java.awt.Color(255, 255, 255));
        content.setPreferredSize(new java.awt.Dimension(1260, 700));

        observationTable  = new javax.swing.JTable(){
            public boolean isCellEditable(int row,int column){
                for(int i = 0; i < observationTable.getRowCount(); i ++){
                    if(row < 0){
                        return true;
                    }
                }
                return false;
            }
        };
        observationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        observationTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(observationTable);

        jLabel1.setText("Tipos de Observación");

        jLabel5.setText("Estado de empleado");

        statusEmpTable  = new javax.swing.JTable(){
            public boolean isCellEditable(int row,int column){
                for(int i = 0; i < statusEmpTable.getRowCount(); i ++){
                    if(row < 0){
                        return true;
                    }
                }
                return false;
            }
        };
        statusEmpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        statusEmpTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(statusEmpTable);

        statusField.setBorder(null);

        jLabel6.setText("Ingresar nuevo estado de empleado");

        obsField.setBorder(null);

        jLabel2.setText("Ingresar nuevo tipo de observación");

        jLabel3.setText("Tipos de teléfono");

        phoneCatTable = new javax.swing.JTable(){
            public boolean isCellEditable(int row,int column){
                for(int i = 0; i < phoneCatTable.getRowCount(); i ++){
                    if(row < 0){
                        return true;
                    }
                }
                return false;
            }
        };
        phoneCatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        phoneCatTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(phoneCatTable);

        jLabel4.setText("Ingresar nuevo tipo de teléfono");

        typeField.setBorder(null);

        refreshObservationImage.setBorderSize(0);
        refreshObservationImage.setBorderSpace(0);
        refreshObservationImage.setImage(new javax.swing.ImageIcon(getClass().getResource("/images/optionsPerPanel/refreshImage.png"))); // NOI18N
        refreshObservationImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshObservationImageMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshObservationImageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshObservationImageMouseExited(evt);
            }
        });

        refreshStatustImage.setBorderSize(0);
        refreshStatustImage.setBorderSpace(0);
        refreshStatustImage.setImage(new javax.swing.ImageIcon(getClass().getResource("/images/optionsPerPanel/refreshImage.png"))); // NOI18N
        refreshStatustImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshStatustImageMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshStatustImageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshStatustImageMouseExited(evt);
            }
        });

        refreshCategoryImage.setBorderSize(0);
        refreshCategoryImage.setBorderSpace(0);
        refreshCategoryImage.setImage(new javax.swing.ImageIcon(getClass().getResource("/images/optionsPerPanel/refreshImage.png"))); // NOI18N
        refreshCategoryImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshCategoryImageMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshCategoryImageMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshCategoryImageMouseExited(evt);
            }
        });

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(obsField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(240, 240, 240)
                        .addComponent(refreshObservationImage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 950, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(240, 240, 240)
                        .addComponent(refreshStatustImage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 950, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(320, 320, 320)
                        .addComponent(refreshCategoryImage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(6, 6, 6)
                                .addComponent(obsField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(refreshObservationImage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel5)
                .addGap(6, 6, 6)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(6, 6, 6)
                                .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(refreshStatustImage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addGroup(contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel4)
                        .addGap(6, 6, 6)
                        .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contentLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(refreshCategoryImage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(content, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshObservationImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshObservationImageMouseClicked
            if(!obsField.getText().equals("")){
                try {
                    if(extra_methods.confirmChanges(content, false)){
                        ins_procs.insert_type_observation(obsField.getText());
                        updateTableObservation();   
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(insertMoreDataPanel.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(insertMoreDataPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(content, "Todos los datos del tipo de observación son obligatorios", "ERROR: Faltan campos de llenar", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_refreshObservationImageMouseClicked

    private void refreshObservationImageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshObservationImageMouseEntered
        extra_methods.showSelectedOption(refreshObservationImage, 995, 120);
    }//GEN-LAST:event_refreshObservationImageMouseEntered

    private void refreshObservationImageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshObservationImageMouseExited
        extra_methods.resetSelectedOption(refreshObservationImage, 1000, 120);
    }//GEN-LAST:event_refreshObservationImageMouseExited

    private void refreshStatustImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshStatustImageMouseClicked
        try {
            if(!statusField.getText().equals("")){
                if(extra_methods.confirmChanges(content, false)){
                    ins_procs.insert_status(statusField.getText());
                    updateTableStatus();                    
                }
            }else{
                JOptionPane.showMessageDialog(content, "Todos los datos del estado del empleado son obligatorios", "ERROR: Faltan campos de llenar", JOptionPane.ERROR_MESSAGE);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(insertData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(insertData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshStatustImageMouseClicked

    private void refreshStatustImageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshStatustImageMouseEntered
        extra_methods.showSelectedOption(refreshStatustImage, 995, 300);
    }//GEN-LAST:event_refreshStatustImageMouseEntered

    private void refreshStatustImageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshStatustImageMouseExited
        extra_methods.resetSelectedOption(refreshStatustImage, 1000, 300);
    }//GEN-LAST:event_refreshStatustImageMouseExited

    private void refreshCategoryImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCategoryImageMouseClicked
        try {
            if(!typeField.getText().equals("")){
                if(extra_methods.confirmChanges(content, false)){
                    ins_procs.insert_phcategory(typeField.getText());
                    updateTablePhCat();
                }
            }else{
                JOptionPane.showMessageDialog(content, "Todos los datos del tipo de teléfono son obligatorios", "ERROR: Faltan campos de llenar", JOptionPane.ERROR_MESSAGE);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(insertData.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(insertData.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshCategoryImageMouseClicked

    private void refreshCategoryImageMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCategoryImageMouseEntered
        extra_methods.showSelectedOption(refreshCategoryImage, 995, 530);
    }//GEN-LAST:event_refreshCategoryImageMouseEntered

    private void refreshCategoryImageMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCategoryImageMouseExited
        extra_methods.resetSelectedOption(refreshCategoryImage, 1000, 530);
    }//GEN-LAST:event_refreshCategoryImageMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel content;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTextField obsField;
    private javax.swing.JTable observationTable;
    private javax.swing.JTable phoneCatTable;
    private Utilities.image_avatar refreshCategoryImage;
    private Utilities.image_avatar refreshObservationImage;
    private Utilities.image_avatar refreshStatustImage;
    private javax.swing.JTable statusEmpTable;
    private javax.swing.JTextField statusField;
    private javax.swing.JTextField typeField;
    // End of variables declaration//GEN-END:variables
}
